package marker;

import java.util.Date;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import java.util.List;

import org.springframework.web.bind.annotation.RequestHeader;

import marker.Sheet;
import marker.SheetRepository;
import marker.Mark;
import marker.MarkRepository;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/") // This means URL's start with /demo (after Application path)
public class MainController {
	@Autowired // This means to get the bean called sheetRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;
	
	@Autowired
	private SheetRepository sheetRepository;
	
	@Autowired
	private MarkRepository markRepository;
	
	public MainController( ) {
	}

	@PostMapping(path="/users")
	public @ResponseBody User addNewUser (@RequestParam String phone) {
		User u = userRepository.findOneByPhone(phone);
		if( u == null ) {
			u = new User();		
			u.setPhone(phone);
			u = userRepository.save(u);
		}
		return u;
	}
	
	@GetMapping(path="/sheet")
	public @ResponseBody Sheet getSheet(Long id) {
		return sheetRepository.findOne(id);
	}
	
	@DeleteMapping(path="/sheet")
	public @ResponseBody Integer deleteSheet(@RequestHeader(value="user") Long user_id, Long id) {
		return sheetRepository.deleteByIdAndAuthor_Id(id, user_id);
	}
	
	@PostMapping(path="/sheets")
	public @ResponseBody Sheet addNewSheet (@RequestHeader(value="user") Long user_id, @RequestParam String name) {
		// @ResponseBody means the returned String is the response, not a view name
		Sheet s = new Sheet();		
		s.setName(name);
		s.setAuthorId(user_id);
		return sheetRepository.save(s);
	}
	
	@GetMapping(path="/sheets/known")
	public @ResponseBody Iterable<Sheet> getKnownSheets( @RequestHeader(value="user") Long user_id ) {
		return sheetRepository.findByMarksAuthor_Id(user_id);
	}
	
	@GetMapping(path="/sheets/find")
	public @ResponseBody Iterable<Sheet> getFoundSheets(@RequestHeader(value="user") Long user, @RequestParam String txt) {
		return sheetRepository.findByNameContaining(txt);
	}
	
	@GetMapping(path="/sheets/my")
	public @ResponseBody Iterable<Sheet> getMySheets(@RequestHeader(value="user") Long user_id) {
		return sheetRepository.findByAuthor_Id(user_id);
	}
	
	@GetMapping(path="/marks")
	public @ResponseBody Iterable<Mark> getMarks(@RequestHeader(value="user") Long user_id, @RequestParam Long sheet_id) {
		return markRepository.findBySheet_Id(sheet_id);
	}
	
	@PostMapping(path="/marks")
	public @ResponseBody Mark addNewMark(@RequestHeader(value="user") Long user_id, @RequestParam Long sheet_id, @RequestParam Integer value, @RequestParam String descr) {
		List<Mark> prevs = markRepository.findByAuthor_IdAndSheet_Id( sheet_id, user_id );
		if( prevs!=null  ) cleanMarks(prevs, 0); 
		
		Mark m = new Mark();
		m.setAuthorId(user_id);
		m.setSheetId(sheet_id);
		m.setValue(value);
		m.setDescr(descr);
		return markRepository.save(m);
	}

	@PostMapping(path="/marks/sharing")
	public @ResponseBody Mark sharingMark(@RequestParam Long sheet_id, @RequestParam String phone) {
		User user = addNewUser(phone);
		List<Mark> prevs = markRepository.findByAuthor_IdAndSheet_Id(sheet_id, user.getId());
		Mark m = null;
		if( prevs!=null && prevs.size()>0 ){
			m = prevs.get(0);
			cleanMarks(prevs, 1);
		} else {
			m = new Mark();
			m.setAuthorId(user.getId());
			m.setSheetId(sheet_id);
			m.setValue(0);
			m = markRepository.save(m);
		}
		return m;
	}
	
	private void cleanMarks( List<Mark> marks, int skip ) {
		for( int i=skip; i<marks.size(); i++ ) {
			Mark m = marks.get(i);
			m.setDeleted(new Date());
			markRepository.save(m);
		}
	}
}
